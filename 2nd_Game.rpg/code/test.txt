SX, SY = (1600,1600)
def setup():
    size(1600,1600)
    frameRate(120)
    global img, tilesize, IsX, IsY, Xp, Yp, MAP, newimg, xspeed, yspeed, speed, chunks, newimg, Cpw, Cph, Clw, Clh, mapdraw
    mapdraw = 1
    speed = 2
    img = loadImage("FINISHED TILESET (1) (1).png")
    #each image is 10x original size
    xspeed = 0
    yspeed = 0
    tilesize = 80
    IsX, IsY = (8,8)
    Xp, Yp = (0,0)
    print IsX,IsY
    MAP = [[0 for x in range(60)] for y in range(60)]
    chunks = [[0 for x in range(30)] for y in range(30)]
    newimg = [0 for x in range(IsX*IsY)]
    for y in range(IsY):
        for x in range(IsX):
            newimg[x+(y*IsX)] = img.get(x*tilesize,y*tilesize,tilesize,tilesize)
    Cpw = int(random(1,10))
    Cph = int(random(1,10))
    Clh = int(random(1,10))
    Clw = int(random(1,10))
    print "RANDOM VALUES:", Cpw, Cph, Clh, Clw
    #render the walls of each room
    for y in range(Clh):
        chunks[0][y] = 5
    for x in range(Cpw):
        chunks[x][Clh] = 10
    for y in range(Cph):
        chunks[Cpw][Clh+y] = 5
    for x in range(Clw):
        chunks[Cpw+x][Clh+Cph] = 10
    for y in range(Cph+Clh):
        chunks[Cpw+Clw][(Clh+Cph)-y] = 13
    for x in range(Cpw+Clw+1):
        chunks[0+x][0] = 8
    #make the corners into corners
    chunks[0][0] = 4
    chunks[0][Clh] = 6
    chunks[Cpw][Clh] = 9
    chunks[Cpw][Cph+Clh] = 6
    chunks[Cpw+Clw][Cph+Clh] = 14
    chunks[Cpw+Clw][0] = 12
    #fill the room
    for x in range(Cpw+Clw-1):
        for y in range(Clh-1):
            chunks[x+1][y+1] = 9
            
    for x in range(Clw-1):
        for y in range(Cph):
            chunks[Cpw+x+1][Clh+y] = 9
    print "CHUNKS LOADED"
    #taking a prewidth, preheight, postwidth, and postheight and making an j-shaped room
    MAP = [[4 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,6 ,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,21,21,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,10,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,20,21,21,21,21,21,21,21,21,21,21,21,22,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,24,25,25,25,25,25,25,25,25,25,25,25,26,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,24,25,25,25,25,25,25,25,25,25,25,25,26,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,24,25,25,25,25,25,25,25,25,25,25,25,26,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [8 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,24,25,25,25,25,25,25,25,25,25,25,25,26,25,25,25,25,25,25,25,25,25,25,25,25,26,9 ,10,0],
    [12,13,13,13,13,13,13,13,13,13,13,13,13,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,24,24,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,25,25,25,25,25,25,25,25,25,25,25,25,25,37,37,37,37,37,37,37,37,37,37,37,37,37,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,24,25,25,25,25,25,25,25,25,25,25,25,26,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,24,25,25,25,25,25,25,25,25,25,25,25,26,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,24,25,25,25,25,25,25,25,25,25,25,25,26,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,24,25,25,25,25,25,25,25,25,25,25,25,26,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,28,29,29,29,29,29,25,25,29,29,29,29,30,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,9 ,10,0],
    [55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,42,9 ,10,0],
    [8 ,13,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,9 ,47,0],
    [0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0, 0]]
    if mapdraw == 0:
        MAP = chunks
    
def draw():
    global Xp, Yp
    print Xp, Yp
    Xp += xspeed
    Yp += yspeed
    ModXPrecalc = ((Xp%tilesize)-tilesize)+int(Xp/tilesize)
    ModYPrecalc = (Yp%tilesize)-tilesize
    for y in range((SY+tilesize)/tilesize):
        for x in range((SX+tilesize)/tilesize):
            image(newimg[MAP[y-int(Yp/tilesize)][x-int(Xp/tilesize)]],x*tilesize+ModXPrecalc,y*tilesize+ModYPrecalc)

def keyPressed():
    global xspeed, yspeed
    if key == 'w' or key == 'W':
        yspeed = speed
    if key == 's' or key == 'S':
        yspeed = -speed
    if key == 'a' or key == 'A':
        xspeed = speed
    if key == 'd' or key == 'D':
        xspeed = -speed
def keyReleased():
    global xspeed, yspeed
    if key == 'w' or key == 's' or key == 'W' or key == 'S':
        yspeed = 0
    if key == 'a' or key == 'd' or key == 'A' or key == 'S':
        xspeed = 0
